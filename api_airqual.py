# -*- coding: utf-8 -*-
"""API_AIRQual.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LYBxzFmcBjUh3hHuQrhUWu97MSX9ljEm

LIBRARY
"""

!pip install fastapi sqlalchemy pydantic pyngrok uvicorn
!pip install python-jose[cryptography]
!pip install pydantic
!pip install typing-extensions

"""AUTH"""

# Save auth.py module
auth_code = """
from datetime import datetime, timedelta
from typing import Optional
from fastapi import HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt

# Secret key for JWT
SECRET_KEY = "secret_key_for_jwt_token"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Simple user database
fake_users_db = {
    "user1": {
        "username": "user1",
        "hashed_password": "fakehashedpassword1",  # Replace with real hashed password
    }
}

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


def verify_password(plain_password, hashed_password):
    return plain_password == hashed_password


def get_user(username: str):
    user = fake_users_db.get(username)
    return user


def authenticate_user(username: str, password: str):
    user = get_user(username)
    if not user or not verify_password(password, user["hashed_password"]):
        return False
    return user


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    user = get_user(username)
    if user is None:
        raise credentials_exception
    return user
"""
with open("auth.py", "w") as f:
    f.write(auth_code)

"""MAIN"""

# Save main.py module
main_code = """
from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import BaseModel
from auth import authenticate_user, create_access_token, get_current_user
from typing import List

app = FastAPI()

# Example Model
class SensorData(BaseModel):
    pm25: float = Field(..., example=25.5)
    pm10: float = Field(..., example=30.2)
    mq135_value: float = Field(..., example=1.2)
    co2_ppm: float = Field(..., example=400.0)
    temperature: float = Field(..., example=25.0)
    humidity: float = Field(..., example=60.0)
    timestamp: Optional[datetime] = None

# Simulated Database
sensor_data_db: List[SensorData] = []

@app.post("/token")
def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(status_code=400, detail="Invalid username or password")
    access_token = create_access_token(data={"sub": user["username"]})
    return {"access_token": access_token, "token_type": "bearer"}

@app.post("/sensor-data")
def add_sensor_data(data: SensorData, user=Depends(get_current_user)):
    sensor_data_db.append(data)
    return {"message": "Sensor data added successfully"}

@app.get("/sensor-data", response_model=List[SensorData])
def get_sensor_data(user=Depends(get_current_user)):
    return sensor_data_db
"""
with open("main.py", "w") as f:
    f.write(main_code)

"""SQL"""

# Import necessary libraries
from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String, Float
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from pyngrok import ngrok

# Database setup
DATABASE_URL = "sqlite:///./sensors.db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Define SensorData model
class SensorData(Base):
    __tablename__ = "sensor_data"
    id = Column(Integer, primary_key=True, index=True)
    pm25 = Column(Float, nullable=False)
    pm10 = Column(Float, nullable=False)
    mq135_value = Column(Float, nullable=False)
    co2_ppm = Column(Float, nullable=False)
    temperature = Column(Float, nullable=False)
    humidity = Column(Float, nullable=False)

# Create the database tables
Base.metadata.create_all(bind=engine)

# Pydantic model for request validation
class SensorDataRequest(BaseModel):
    pm25: float
    pm10: float
    mq135_value: float
    co2_ppm: float
    temperature: float
    humidity: float

# Initialize FastAPI app
app = FastAPI()

# Dependency for database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Routes
@app.post("/add_data", response_model=dict)
def add_data(data: SensorDataRequest, db: Session = Depends(get_db)):
    new_data = SensorData(**data.dict())
    db.add(new_data)
    db.commit()
    db.refresh(new_data)
    return {"message": "Data added successfully!", "id": new_data.id}

@app.get("/get_data", response_model=list[SensorDataRequest])
def get_data(db: Session = Depends(get_db)):
    data = db.query(SensorData).all()
    return data

@app.get("/get_data/{data_id}", response_model=SensorDataRequest)
def get_data_by_id(data_id: int, db: Session = Depends(get_db)):
    data = db.query(SensorData).filter(SensorData.id == data_id).first()
    if not data:
        raise HTTPException(status_code=404, detail="Data not found")
    return data

# Ngrok setup
##def start_ngrok():
    #public_url = ngrok.connect(8000)
    #print("Ngrok URL:", public_url)

# Start ngrok (use this function in a notebook or local execution)
#start_ngrok()

!uvicorn main:app --host 0.0.0.0 --port 8000 --reload